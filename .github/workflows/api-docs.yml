name: Generate API Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/**/*.py'
      - 'scripts/generate_docs.py'
      - 'requirements.txt'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app/**/*.py'
      - 'scripts/generate_docs.py'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate API documentation
        env:
          FLASK_ENV: development
          SECRET_KEY: docs-generation-key
          DATABASE_URL: sqlite:///docs.db
        run: |
          python scripts/generate_docs.py

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: docs/api/
          retention-days: 30

      - name: Setup Pages (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/api/

  deploy-docs:
    needs: generate-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  validate-docs:
    needs: generate-docs
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-documentation
          path: docs/api/

      - name: Validate OpenAPI specification
        uses: APIDevTools/swagger-cli@v1
        with:
          command: validate docs/api/openapi.json

      - name: Test documentation accessibility
        run: |
          # Check if required files exist
          test -f docs/api/openapi.json || (echo "‚ùå OpenAPI spec not found" && exit 1)
          test -f docs/api/index.html || (echo "‚ùå Swagger UI not found" && exit 1)
          test -f docs/api/README.md || (echo "‚ùå Documentation README not found" && exit 1)
          
          # Validate JSON syntax
          python -m json.tool docs/api/openapi.json > /dev/null || (echo "‚ùå Invalid JSON in OpenAPI spec" && exit 1)
          
          echo "‚úÖ Documentation validation passed"

      - name: Comment on PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üìö **API Documentation Updated**\n\nThe API documentation has been automatically generated and validated.\n\n**Changes:**\n- OpenAPI specification updated\n- Swagger UI regenerated\n- Documentation validated\n\n[View Documentation Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            })