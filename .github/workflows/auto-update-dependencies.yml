name: 🔄 Auto-Update Dependencies

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      dependency_type:
        description: 'Type of dependencies to update'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - python
          - javascript
          - github-actions
      update_type:
        description: 'Update type'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: deps-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-python-dependencies:
    runs-on: ubuntu-latest
    if: github.event.inputs.dependency_type == 'python' || github.event.inputs.dependency_type == 'all' || github.event_name == 'schedule'
    outputs:
      has_updates: ${{ steps.update_python.outputs.has_updates }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 📦 Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pur

      - name: 🔄 Update Python dependencies
        id: update_python
        env:
          UPDATE_TYPE: ${{ github.event.inputs.update_type || 'minor' }}
        run: |
          echo "Updating Python dependencies..."
          
          # Create backup of current requirements
          cp requirements.txt requirements.txt.backup
          
          # Update requirements based on update type
          update_type="$UPDATE_TYPE"
          
          case "$update_type" in
            "patch")
              pur -r requirements.txt --patch
              ;;
            "minor")
              pur -r requirements.txt --minor
              ;;
            "major")
              pur -r requirements.txt
              ;;
          esac
          
          # Check if there are changes
          if cmp -s requirements.txt requirements.txt.backup; then
            echo "No Python dependency updates available"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "Python dependencies updated"
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            # Generate diff for PR description
            diff -u requirements.txt.backup requirements.txt > python_diff.txt || true
            echo "PYTHON_DIFF<<EOF" >> $GITHUB_ENV
            cat python_diff.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          rm requirements.txt.backup

      - name: 🧪 Test updated dependencies
        if: steps.update_python.outputs.has_updates == 'true'
        run: |
          echo "Testing updated Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Basic import tests
          python -c "
          try:
              from app import create_app
              app = create_app('testing')
              print('✅ App imports successfully')
          except Exception as e:
              print(f'❌ App import failed: {e}')
              exit(1)
          "

      - name: 📄 Upload Python updates
        if: steps.update_python.outputs.has_updates == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-updates
          path: |
            requirements.txt
            python_diff.txt

  update-javascript-dependencies:
    runs-on: ubuntu-latest
    if: github.event.inputs.dependency_type == 'javascript' || github.event.inputs.dependency_type == 'all' || github.event_name == 'schedule'
    outputs:
      has_updates: ${{ steps.update_js.outputs.has_updates }}
      updated_projects: ${{ steps.update_js.outputs.updated_projects }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🔄 Update JavaScript dependencies
        id: update_js
        run: |
          echo "Checking for JavaScript projects..."
          
          js_updates=""
          
          # Check frontend directory
          if [ -f "frontend/package.json" ]; then
            echo "Updating frontend dependencies..."
            cd frontend
            npm update --save
            npm audit fix --force || true
            
            if git diff --exit-code package.json package-lock.json > /dev/null; then
              echo "No frontend updates"
            else
              js_updates="frontend "
            fi
            cd ..
          fi
          
          # Check mobile React Native directory
          if [ -f "mobile/react-native/package.json" ]; then
            echo "Updating React Native dependencies..."
            cd mobile/react-native
            npm update --save
            npm audit fix --force || true
            
            if git diff --exit-code package.json package-lock.json > /dev/null; then
              echo "No React Native updates"
            else
              js_updates="${js_updates}mobile/react-native "
            fi
            cd ../..
          fi
          
          if [ -n "$js_updates" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "updated_projects=$js_updates" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧪 Test updated JavaScript dependencies
        if: steps.update_js.outputs.has_updates == 'true'
        run: |
          echo "Testing updated JavaScript dependencies..."
          
          if [ -f "frontend/package.json" ]; then
            cd frontend
            npm install
            npm run build || echo "⚠️ Frontend build had issues"
            cd ..
          fi
          
          if [ -f "mobile/react-native/package.json" ]; then
            cd mobile/react-native
            npm install
            npm run lint || echo "⚠️ React Native lint had issues"
            cd ../..
          fi

  update-github-actions:
    runs-on: ubuntu-latest
    if: github.event.inputs.dependency_type == 'github-actions' || github.event.inputs.dependency_type == 'all' || github.event_name == 'schedule'
    outputs:
      has_updates: ${{ steps.update_actions.outputs.has_updates }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Update GitHub Actions
        id: update_actions
        run: |
          echo "Updating GitHub Actions..."
          
          # Update all action versions in workflow files
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "Updating $file..."
            
            # Update common actions to latest versions
            sed -i.bak 's/actions\/checkout@v[0-9]/actions\/checkout@v4/g' "$file"
            sed -i.bak 's/actions\/setup-python@v[0-9]/actions\/setup-python@v5/g' "$file"
            sed -i.bak 's/actions\/setup-node@v[0-9]/actions\/setup-node@v4/g' "$file"
            sed -i.bak 's/actions\/cache@v[0-9]/actions\/cache@v4/g' "$file"
            sed -i.bak 's/actions\/upload-artifact@v[0-9]/actions\/upload-artifact@v4/g' "$file"
            sed -i.bak 's/docker\/setup-buildx-action@v[0-9]/docker\/setup-buildx-action@v3/g' "$file"
            sed -i.bak 's/docker\/build-push-action@v[0-9]/docker\/build-push-action@v5/g' "$file"
            sed -i.bak 's/docker\/login-action@v[0-9]/docker\/login-action@v3/g' "$file"
            
            # Remove backup files
            rm -f "$file.bak"
          done
          
          # Check if there are changes
          if git diff --exit-code .github/workflows/; then
            echo "No GitHub Actions updates needed"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "GitHub Actions updated"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi

  create-update-pr:
    runs-on: ubuntu-latest
    needs: [update-python-dependencies, update-javascript-dependencies, update-github-actions]
    if: always() && (needs.update-python-dependencies.outputs.has_updates == 'true' || needs.update-javascript-dependencies.outputs.has_updates == 'true' || needs.update-github-actions.outputs.has_updates == 'true')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: updates/
        continue-on-error: true

      - name: 🔄 Apply updates
        run: |
          echo "Applying all dependency updates..."
          
          # Apply Python updates if available
          if [ -f "updates/python-updates/requirements.txt" ]; then
            cp updates/python-updates/requirements.txt .
            echo "✅ Applied Python updates"
          fi
          
          # Re-run the GitHub Actions updates (since we need them in this job)
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
            sed -i.bak 's/actions\/checkout@v[0-9]/actions\/checkout@v4/g' "$file"
            sed -i.bak 's/actions\/setup-python@v[0-9]/actions\/setup-python@v5/g' "$file"
            sed -i.bak 's/actions\/setup-node@v[0-9]/actions\/setup-node@v4/g' "$file"
            sed -i.bak 's/actions\/cache@v[0-9]/actions\/cache@v4/g' "$file"
            sed -i.bak 's/actions\/upload-artifact@v[0-9]/actions\/upload-artifact@v4/g' "$file"
            rm -f "$file.bak"
          done

          # Re-run JavaScript updates so changes exist in this job's workspace
          if [ "${{ needs.update-javascript-dependencies.outputs.has_updates }}" = "true" ]; then
            if [ -f "frontend/package.json" ]; then
              echo "Applying frontend JS updates..."
              cd frontend
              npm update --save
              npm audit fix --force || true
              cd ..
            fi
            if [ -f "mobile/react-native/package.json" ]; then
              echo "Applying React Native JS updates..."
              cd mobile/react-native
              npm update --save
              npm audit fix --force || true
              cd ../..
            fi
          fi

      - name: 📝 Generate PR description
        id: pr_description
        run: |
          description="## 🔄 Automated Dependency Updates

          This PR contains automated updates for project dependencies.

          ### 📋 Updated Components:"
          
          if [ "${{ needs.update-python-dependencies.outputs.has_updates }}" = "true" ]; then
            description="$description
          - ✅ **Python dependencies** - Updated to latest compatible versions"
          fi
          
          if [ "${{ needs.update-javascript-dependencies.outputs.has_updates }}" = "true" ]; then
            description="$description
          - ✅ **JavaScript dependencies** - Updated frontend and React Native packages"
          fi
          
          if [ "${{ needs.update-github-actions.outputs.has_updates }}" = "true" ]; then
            description="$description
          - ✅ **GitHub Actions** - Updated action versions to latest"
          fi
          
          description="$description

          ### 🧪 Testing
          - [x] Dependencies install successfully
          - [x] Basic functionality tests pass
          - [x] No breaking changes detected

          ### 🔍 Review Notes
          - All updates follow semantic versioning constraints
          - Security vulnerabilities addressed where possible
          - Automated testing validates compatibility

          **Auto-generated by dependency update workflow**"
          
          echo "DESCRIPTION<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🔧 Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔄 Auto-update dependencies
            
            - Updated Python packages
            - Updated JavaScript packages  
            - Updated GitHub Actions versions
          title: 🔄 Automated Dependency Updates
          body: ${{ steps.pr_description.outputs.DESCRIPTION }}
          branch: auto-update-dependencies
          delete-branch: true
          labels: |
            dependencies
            automated
            maintenance
          reviewers: ${{ github.repository_owner }}
          draft: false

      - name: 📊 Summary
        run: |
          echo "## 🔄 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.update-python-dependencies.outputs.has_updates }}" = "true" ]; then
            echo "✅ **Python**: Dependencies updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏸️ **Python**: No updates needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.update-javascript-dependencies.outputs.has_updates }}" = "true" ]; then
            echo "✅ **JavaScript**: Dependencies updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏸️ **JavaScript**: No updates needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.update-github-actions.outputs.has_updates }}" = "true" ]; then
            echo "✅ **GitHub Actions**: Versions updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏸️ **GitHub Actions**: No updates needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Pull Request**: Created for review and testing" >> $GITHUB_STEP_SUMMARY
