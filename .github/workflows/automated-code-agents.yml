name: ðŸ¤– Automated Code Agents

on:
  workflow_dispatch:
    inputs:
      operation:
        description: "Select operation to run"
        required: true
        type: choice
        default: security-scan
        options:
          - security-scan
          - dependency-audit
          - tests
          - format
      auto_fix:
        description: "When operation=format, automatically format and open PR"
        required: true
        type: boolean
        default: true
      base_branch:
        description: "Base branch for PRs (format op)"
        required: false
        default: main

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: automated-agents-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    name: Run ${{ inputs.operation }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install tools (security)
        if: inputs.operation == 'security-scan'
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: Security scan
        if: inputs.operation == 'security-scan'
        run: |
          set -e
          bandit -r app/ -f json -o bandit-report.json || true
          safety scan --json > safety-report.json || true
          pip-audit -r requirements.txt -f json -o pip-audit.json || true

      - name: Upload security artifacts
        if: inputs.operation == 'security-scan' && always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit.json

      - name: Install app deps (audit/tests)
        if: inputs.operation == 'dependency-audit' || inputs.operation == 'tests'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt || true

      - name: Dependency audit (pip-audit + pip list outdated)
        if: inputs.operation == 'dependency-audit'
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt -f json -o pip-audit.json || true
          pip list --outdated --format=json > pip-outdated.json || true

      - name: Upload dependency artifacts
        if: inputs.operation == 'dependency-audit' && always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            pip-audit.json
            pip-outdated.json

      - name: Run tests (smoke)
        if: inputs.operation == 'tests'
        env:
          PYTHONPATH: ${{ github.workspace }}
          FLASK_ENV: testing
          DATABASE_URL: sqlite:///test.db
        run: |
          pytest -v --tb=short || true

      - name: Install formatters
        if: inputs.operation == 'format'
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Check formatting
        if: inputs.operation == 'format'
        id: fmtcheck
        shell: bash
        run: |
          set +e
          black --check . || NEEDS_FORMATTING=1
          isort --check-only . || NEEDS_FORMATTING=1
          echo "needs_formatting=${NEEDS_FORMATTING:-0}" >> "$GITHUB_OUTPUT"

      - name: Apply formatting
        if: inputs.operation == 'format' && steps.fmtcheck.outputs.needs_formatting == '1' && inputs.auto_fix == true
        run: |
          black .
          isort .

      - name: Create Pull Request (format)
        if: inputs.operation == 'format' && inputs.auto_fix == true
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "style: auto-format with black/isort"
          title: "chore: auto-format codebase"
          body: |
            Automated formatting applied by workflow.

            - black + isort
            - Triggered by: ${{ github.actor }}
          branch: chore/auto-format-${{ github.run_id }}
          base: ${{ inputs.base_branch }}
          labels: maintenance, automation
          signoff: true

      - name: Summary
        if: always()
        run: |
          echo "### Automated Code Agents" >> $GITHUB_STEP_SUMMARY
          echo "Operation: ${{ inputs.operation }}" >> $GITHUB_STEP_SUMMARY
          echo "Auto-fix: ${{ inputs.auto_fix }}" >> $GITHUB_STEP_SUMMARY
