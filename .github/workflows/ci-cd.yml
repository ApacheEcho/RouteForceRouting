name: RouteForce CI/CD Pipeline

permissions:
  contents: read
  security-events: write


on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: routeforce/app

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Continuous Integration
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11, 3.12]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: routeforce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 mypy

      - name: Code formatting check
        continue-on-error: true
        run: |
          black --check --diff . || echo "‚ö†Ô∏è Black found formatting issues but continuing..."

      - name: Lint with flake8
        continue-on-error: true
        run: |
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Critical flake8 errors found but continuing..."
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        continue-on-error: true
        run: |
          mypy app/ --ignore-missing-imports --no-strict-optional || echo "‚ö†Ô∏è MyPy found issues but continuing..."

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/routeforce_test
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Security scan with bandit
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            bandit-report.json
          if-no-files-found: warn

  # Security and vulnerability scanning
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        env:
          CODEQL_DISABLE_TELEMETRY: true
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload Trivy scan results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: "trivy-results.sarif"

  # Build and push Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy to staging
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: false # Disabled until Kubernetes cluster is configured

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        if: false # Disabled until cluster configured
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: "dummy" # ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update image tags in deployment
          sed -i "s|routeforce/app:latest|${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${IMAGE_TAG:0:7}|g" k8s/02-application.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/ -n routeforce-staging

          # Wait for deployment to complete
          kubectl rollout status deployment/routeforce-app -n routeforce-staging --timeout=300s

      - name: Run staging tests
        run: |
          # Wait for application to be ready
          sleep 30

          # Get service URL
          STAGING_URL=$(kubectl get service routeforce-lb -n routeforce-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Run basic health checks
          curl -f http://${STAGING_URL}/health || exit 1

          # Run integration tests against staging
          pytest tests/integration/ --staging-url=http://${STAGING_URL}

  # Deploy to production
  deploy-production:
    needs: [test, build, deploy-staging]
    runs-on: ubuntu-latest
    if: false # Disabled until Kubernetes cluster is configured

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        if: false # Disabled until cluster configured
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: "dummy" # ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to production
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update image tags in deployment
          sed -i "s|routeforce/app:latest|${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:main-${IMAGE_TAG:0:7}|g" k8s/02-application.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/ -n routeforce-production

          # Wait for deployment to complete
          kubectl rollout status deployment/routeforce-app -n routeforce-production --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for application to be ready
          sleep 60

          # Get service URL
          PROD_URL=$(kubectl get service routeforce-lb -n routeforce-production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Run comprehensive health checks
          curl -f https://${PROD_URL}/health || exit 1
          curl -f https://${PROD_URL}/metrics || exit 1

      - name: Notify deployment success
        if: false # Disabled - configure SLACK_WEBHOOK_URL to enable
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üöÄ RouteForce deployed successfully to production!"

  # Performance testing
  performance:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        if: false # Disabled - configure STAGING_URL to enable
        run: |
          k6 run --vus 50 --duration 5m tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: results.json
