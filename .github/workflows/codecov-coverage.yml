name: 🧪 CodeCov Coverage Analysis

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'tests/**'
      - '*.py'
      - 'requirements.txt'
      - 'pytest.ini'
      - '.coveragerc'
      - 'codecov.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'tests/**'
      - '*.py'
      - 'requirements.txt'
      - 'pytest.ini'
      - '.coveragerc'
      - 'codecov.yml'
  schedule:
    # Run coverage analysis daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      coverage_threshold:
        description: 'Minimum coverage threshold'
        required: false
        default: '70'
        type: string
      run_performance_tests:
        description: 'Run performance benchmark tests'
        required: false
        default: false
        type: boolean

jobs:
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
    - name: 🛒 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for accurate coverage analysis

    - name: 🔐 Load Codecov token (optional .env.render)
      id: load-codecov
      run: |
        if [ -f .env.render ]; then
          token=$(grep -E '^CODECOV_TOKEN=' .env.render | head -1 | cut -d= -f2- | tr -d '\r' || true)
          if [ -n "$token" ]; then
            echo "::add-mask::$token"
            echo "CODECOV_TOKEN=$token" >> $GITHUB_ENV
            echo "loaded=true" >> $GITHUB_OUTPUT
          else
            echo "Codecov token not found in .env.render"; echo "loaded=false" >> $GITHUB_OUTPUT
          fi
        else
          echo ".env.render not present"; echo "loaded=false" >> $GITHUB_OUTPUT
        fi

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional coverage tools
        pip install codecov coverage[toml] pytest-cov pytest-html pytest-json-report

    - name: 🔍 Validate Configuration
      run: |
        echo "🔧 Validating pytest configuration..."
        python -m pytest --collect-only --quiet
        echo "📋 Coverage configuration:"
        python -m coverage --version
        echo "🎯 CodeCov configuration:"
        if [ -f codecov.yml ]; then
          echo "CodeCov config found ✅"
        else
          echo "CodeCov config missing ❌"
        fi

    - name: 🧪 Run Unit Tests with Coverage
      env:
        COVERAGE_THRESHOLD: ${{ github.event.inputs.coverage_threshold || '70' }}
      run: |
        echo "🚀 Running unit tests with coverage analysis..."
        python -m pytest \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=html:htmlcov \
          --cov-report=xml:coverage.xml \
          --cov-report=json:coverage.json \
          --cov-config=.coveragerc \
          --cov-branch \
          --cov-fail-under=${COVERAGE_THRESHOLD} \
          --html=reports/pytest_report.html \
          --json-report --json-report-file=reports/pytest_report.json \
          -v \
          -m "not slow and not external" \
          --durations=10 \
          tests/ || exit 0  # Don't fail on missing tests initially

    - name: 🎯 Run Algorithm-Specific Coverage
      if: success() || failure()
      run: |
        echo "🧬 Running algorithm-specific coverage..."
        python -m pytest \
          --cov=app/algorithms \
          --cov=app/optimization \
          --cov-report=xml:coverage-algorithms.xml \
          --cov-append \
          -v \
          -m "algorithm" \
          tests/ || echo "No algorithm tests found"

    - name: 🌐 Run API Coverage Tests
      if: success() || failure()  
      run: |
        echo "🌐 Running API endpoint coverage..."
        python -m pytest \
          --cov=app/routes \
          --cov-report=xml:coverage-api.xml \
          --cov-append \
          -v \
          -m "api" \
          tests/ || echo "No API tests found"

    - name: 📊 Run Performance Tests
      if: github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule'
      run: |
        echo "⚡ Running performance benchmark tests..."
        python -m pytest \
          --benchmark-only \
          --benchmark-json=reports/benchmark.json \
          -v \
          -m "performance" \
          tests/ || echo "No performance tests found"

    - name: 📈 Generate Coverage Summary
      if: success() || failure()
      run: |
        echo "📋 Generating coverage summary..."
        python -m coverage report --show-missing --precision=2
        python -m coverage json --pretty-print -o coverage-summary.json
        
        echo "📊 Coverage Summary:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        python -m coverage report --show-missing >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: 🎨 Generate Coverage Visualization
      if: success() || failure()
      run: |
        echo "🎨 Creating coverage visualization..."
        python -c "
        import json, coverage
        try:
            with open('coverage.json', 'r') as f:
                data = json.load(f)
            total_coverage = data['totals']['percent_covered']
            print(f'📊 Total Coverage: {total_coverage:.2f}%')
            
            # Create coverage badge data
            if total_coverage >= 90:
                color = 'brightgreen'
            elif total_coverage >= 80:
                color = 'green'  
            elif total_coverage >= 70:
                color = 'yellow'
            elif total_coverage >= 50:
                color = 'orange'
            else:
                color = 'red'
            
            badge_json = {
                'schemaVersion': 1,
                'label': 'coverage',
                'message': f'{total_coverage:.1f}%',
                'color': color
            }
            
            with open('coverage-badge.json', 'w') as f:
                json.dump(badge_json, f)
                
        except Exception as e:
            print(f'Coverage analysis failed: {e}')
        "

    - name: 📤 Upload Coverage to CodeCov
      if: (success() || failure()) && steps.load-codecov.outputs.loaded == 'true'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml,./coverage-algorithms.xml,./coverage-api.xml
        directory: ./
        flags: unittests,python${{ matrix.python-version }}
        env_vars: OS,PYTHON
        name: codecov-umbrella-${{ matrix.python-version }}
        fail_ci_if_error: false
        verbose: true
        token: ${{ env.CODECOV_TOKEN }}

    - name: 📁 Create Test Reports Directory
      if: success() || failure()
      run: |
        mkdir -p reports
        mv htmlcov reports/ 2>/dev/null || true
        mv coverage.xml reports/ 2>/dev/null || true
        mv coverage.json reports/ 2>/dev/null || true
        mv coverage-summary.json reports/ 2>/dev/null || true
        mv coverage-badge.json reports/ 2>/dev/null || true

    - name: 📊 Upload Coverage Reports
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/
          coverage*.xml
          coverage*.json
        retention-days: 30

    - name: 📈 Coverage Trend Analysis
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "📈 Analyzing coverage trends..."
        python -c "
        import json, os, datetime
        
        # Load current coverage
        try:
            with open('coverage.json', 'r') as f:
                current = json.load(f)
            current_coverage = current['totals']['percent_covered']
            
            # Create trend entry
            trend_entry = {
                'timestamp': datetime.datetime.now().isoformat(),
                'commit': os.environ.get('GITHUB_SHA', 'unknown'),
                'coverage': current_coverage,
                'lines_covered': current['totals']['covered_lines'],
                'lines_total': current['totals']['num_statements']
            }
            
            print(f'📊 Coverage: {current_coverage:.2f}% ({current[\"totals\"][\"covered_lines\"]}/{current[\"totals\"][\"num_statements\"]} lines)')
            
        except Exception as e:
            print(f'Coverage trend analysis failed: {e}')
        "

    - name: 🚨 Coverage Quality Gate
      if: success() || failure()
      run: |
        echo "🚨 Checking coverage quality gate..."
        THRESHOLD=${{ github.event.inputs.coverage_threshold || '70' }}
        
        python -c "
        import json, sys
        
        try:
            with open('coverage.json', 'r') as f:
                data = json.load(f)
            
            coverage = data['totals']['percent_covered']
            threshold = float('${THRESHOLD}')
            
            print(f'📊 Current Coverage: {coverage:.2f}%')
            print(f'🎯 Required Threshold: {threshold}%')
            
            if coverage >= threshold:
                print('✅ Coverage quality gate PASSED!')
                sys.exit(0)
            else:
                print(f'❌ Coverage quality gate FAILED! Missing {threshold - coverage:.2f}%')
                print('🔧 Suggestions to improve coverage:')
                print('   • Add unit tests for untested functions')
                print('   • Add integration tests for API endpoints')
                print('   • Add algorithm-specific test cases')
                print('   • Review and test error handling paths')
                sys.exit(1)
                
        except FileNotFoundError:
            print('⚠️  No coverage data found, skipping quality gate')
            sys.exit(0)
        except Exception as e:
            print(f'Quality gate check failed: {e}')
            sys.exit(0)
        "

  coverage-summary:
    name: 📋 Coverage Summary
    needs: coverage-analysis
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Generate Overall Summary
      run: |
        echo "# 📊 CodeCov Coverage Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Test Coverage Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Versions**: 3.9, 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Threshold**: ${{ github.event.inputs.coverage_threshold || '70' }}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 CodeCov Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed coverage analysis at: https://codecov.io/gh/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔧 Coverage Configuration Files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- `codecov.yml` - CodeCov configuration and quality gates" >> $GITHUB_STEP_SUMMARY
        echo "- `.coveragerc` - Coverage.py settings and exclusions" >> $GITHUB_STEP_SUMMARY
        echo "- `pytest.ini` - PyTest configuration with coverage options" >> $GITHUB_STEP_SUMMARY
