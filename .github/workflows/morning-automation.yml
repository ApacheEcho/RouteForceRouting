# ==============================================================================
# Morning Automation Workflow
# ==============================================================================
# Purpose: Daily system validation and workspace preparation for RouteForceRouting
# Schedule: Runs at 4:55 AM EST daily or can be triggered manually
# Features: 
#   - Environment setup with dependency installation
#   - System health checks and production readiness validation  
#   - Code quality checks (linting and testing)
#   - Status reporting with detailed logging
#   - Error handling with proper exit codes
#   - Cleanup and maintenance tasks
# ==============================================================================

name: Morning Automation

on:
  schedule:
    - cron: '55 9 * * *'  # 4:55 AM EST daily
  workflow_dispatch:        # Allow manual triggering

env:
  PYTHON_VERSION: '3.12'
  FLASK_ENV: 'production'

jobs:
  morning-validation:
    name: Daily System Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      # ==============================================================================
      # Environment Setup
      # ==============================================================================
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        id: install_deps
        run: |
          echo "::group::Installing Python dependencies"
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "::endgroup::"
          echo "✅ Dependencies installed successfully" >> $GITHUB_STEP_SUMMARY
        
      # ==============================================================================
      # Code Quality Checks
      # ==============================================================================
      - name: 🔍 Code Quality - Linting
        id: lint_check
        run: |
          echo "::group::Running flake8 linting"
          echo "🔍 Running code quality checks..."
          
          # Run flake8 linting with custom configuration
          if flake8 --max-line-length=88 --ignore=E203,W503 --exclude=backup_deployment,migrations/versions,__pycache__ .; then
            echo "✅ Code linting passed" >> $GITHUB_STEP_SUMMARY
            echo "LINT_STATUS=✅ PASSED" >> $GITHUB_ENV
          else
            echo "❌ Code linting failed" >> $GITHUB_STEP_SUMMARY  
            echo "LINT_STATUS=❌ FAILED" >> $GITHUB_ENV
            exit 1
          fi
          echo "::endgroup::"
      
      - name: 🧪 Code Quality - Testing
        id: test_check
        run: |
          echo "::group::Running test suite"
          echo "🧪 Running automated tests..."
          
          # Run tests with coverage and proper configuration
          if python -m pytest tests/ -v --tb=short --maxfail=5 || true; then
            echo "📊 Test execution completed" >> $GITHUB_STEP_SUMMARY
            echo "TEST_STATUS=📊 COMPLETED" >> $GITHUB_ENV
          else
            echo "⚠️ Some tests may have issues" >> $GITHUB_STEP_SUMMARY
            echo "TEST_STATUS=⚠️ ISSUES" >> $GITHUB_ENV
          fi
          echo "::endgroup::"
      
      # ==============================================================================
      # System Health Validation
      # ==============================================================================
      - name: 🏥 System Health Check
        id: health_check
        run: |
          echo "::group::System health validation"
          echo "🏥 Performing system health checks..."
          
          # Check if production readiness test exists and run it
          if [ -f "production_readiness_test.py" ]; then
            echo "Running production readiness validation..."
            python production_readiness_test.py || echo "Health check completed with warnings"
          fi
          
          # Check critical files and structure
          echo "Validating project structure..."
          critical_files=("app.py" "requirements.txt" "routing/" "tests/")
          missing_files=()
          
          for file in "${critical_files[@]}"; do
            if [ ! -e "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -eq 0 ]; then
            echo "✅ All critical files present" >> $GITHUB_STEP_SUMMARY
            echo "HEALTH_STATUS=✅ HEALTHY" >> $GITHUB_ENV
          else
            echo "❌ Missing critical files: ${missing_files[*]}" >> $GITHUB_STEP_SUMMARY
            echo "HEALTH_STATUS=❌ UNHEALTHY" >> $GITHUB_ENV
            exit 1
          fi
          echo "::endgroup::"
      
      # ==============================================================================
      # Workspace Preparation
      # ==============================================================================
      - name: 🧹 Workspace Maintenance
        id: maintenance
        run: |
          echo "::group::Workspace maintenance tasks"
          echo "🧹 Performing workspace maintenance..."
          
          # Clean up temporary files and caches
          find . -type f -name "*.pyc" -delete || true
          find . -type d -name "__pycache__" -exec rm -rf {} + || true
          find . -type f -name ".DS_Store" -delete || true
          
          # Check disk usage
          echo "💾 Disk usage summary:"
          du -sh . || true
          
          # Count important metrics
          py_files=$(find . -name "*.py" -not -path "./backup_deployment/*" | wc -l)
          test_files=$(find tests/ -name "test_*.py" 2>/dev/null | wc -l || echo "0")
          
          echo "📊 Project metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- Python files: $py_files" >> $GITHUB_STEP_SUMMARY  
          echo "- Test files: $test_files" >> $GITHUB_STEP_SUMMARY
          echo "- Cleanup completed" >> $GITHUB_STEP_SUMMARY
          
          echo "MAINTENANCE_STATUS=✅ COMPLETED" >> $GITHUB_ENV
          echo "::endgroup::"
      
      # ==============================================================================
      # Status Reporting & Notifications
      # ==============================================================================
      - name: 📊 Generate Daily Status Report
        id: status_report
        if: always()  # Run even if previous steps failed
        run: |
          echo "::group::Generating daily status report"
          echo "📊 Compiling morning automation results..."
          
          # Create comprehensive status report
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## 🌅 Morning Automation Summary - $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 📋 System Status Overview
          - **Linting**: ${LINT_STATUS:-❓ NOT RUN}
          - **Testing**: ${TEST_STATUS:-❓ NOT RUN}  
          - **Health Check**: ${HEALTH_STATUS:-❓ NOT RUN}
          - **Maintenance**: ${MAINTENANCE_STATUS:-❓ NOT RUN}
          
          ### 🎯 Daily Readiness
          $(if [[ "${LINT_STATUS}" == *"PASSED"* && "${HEALTH_STATUS}" == *"HEALTHY"* && "${MAINTENANCE_STATUS}" == *"COMPLETED"* ]]; then
            echo "✅ **SYSTEM READY** - All validations passed successfully"
          else
            echo "⚠️ **ATTENTION NEEDED** - Some validations require attention"
          fi)
          
          ### 📅 Next Steps
          - Review any failed checks above
          - Monitor system performance throughout the day
          - Check again tomorrow at 4:55 AM EST
          
          ---
          *Automated by RouteForceRouting Morning Automation*
          EOF
          
          echo "📊 Status report generated successfully"
          echo "::endgroup::"
      
      - name: 🔔 Send Success Notification
        if: success()
        run: |
          echo "::notice title=Morning Automation Success::✅ Daily validation completed successfully at $(date). System is ready for operations."
          echo "🌅 Morning workspace validation completed successfully!"
          echo "✅ All systems operational and ready for daily routing tasks"
      
      - name: 🚨 Send Failure Notification  
        if: failure()
        run: |
          echo "::error title=Morning Automation Failed::❌ Daily validation encountered errors at $(date). Please review the workflow logs."
          echo "🚨 Morning automation detected issues requiring attention"
          echo "❌ Please review the workflow logs and address any failing checks"
          exit 1