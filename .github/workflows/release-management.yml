name: 📦 Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: routeforce

permissions:
  contents: write
  packages: write
  pull-requests: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Create version and release
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      latest_tag: ${{ steps.version.outputs.latest_tag }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate new version
        id: version
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

          # Remove 'v' prefix and split version
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"

          # Bump version based on input
          case "${{ github.event.inputs.version_type }}" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_version="v$major.$minor.$patch"

          # Add pre-release suffix if specified
          if [ "${{ github.event.inputs.pre_release }}" = "true" ]; then
            timestamp=$(date +%Y%m%d%H%M%S)
            new_version="$new_version-pre.$timestamp"
          fi

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: 📝 Generate changelog
        id: changelog
        run: |
          latest_tag='${{ steps.version.outputs.latest_tag }}'
          echo "Generating changelog since $latest_tag..."

          if [ -n "$latest_tag" ] && git rev-parse "$latest_tag" >/dev/null 2>&1; then
            range="$latest_tag..HEAD"
          else
            range=""
          fi

          if [ -n "$range" ]; then
            changelog=$(git log $range --pretty=format:"- %s (%h)" --no-merges | head -50)
          else
            changelog=$(git log --pretty=format:"- %s (%h)" --no-merges | head -50)
          fi

          if [ -z "$changelog" ]; then
            changelog="- No significant changes"
          fi

          echo "Generated changelog:"
          echo "$changelog"

          {
            echo "changelog<<'EOF'"
            echo "$changelog"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: 🏷️ Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a ${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}"
          git push origin ${{ steps.version.outputs.new_version }}

  # Build and publish release
  build-and-release:
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && (github.event_name == 'push' || needs.create-release.result == 'success')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            tag="${GITHUB_REF#refs/tags/}"
          else
            tag="${{ needs.create-release.outputs.new_version }}"
          fi
          echo "version_tag=$tag" >> $GITHUB_OUTPUT
          echo "version_pypi=${tag#v}" >> $GITHUB_OUTPUT
          echo "Version tag: $tag ; PyPI: ${tag#v}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=RouteForce
            org.opencontainers.image.description=Advanced route optimization platform
            org.opencontainers.image.version=${{ steps.version.outputs.version_tag }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📦 Build Python package
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist --wheel

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          version_tag='${{ steps.version.outputs.version_tag }}'
          version_pypi='${{ steps.version.outputs.version_pypi }}'

          # Determine previous tag always
          previous_tag="$(git describe --tags --abbrev=0 "${version_tag}^" 2>/dev/null || true)"

          # Get changelog
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ needs.create-release.outputs.changelog }}" ]; then
            changelog="${{ needs.create-release.outputs.changelog }}"
          else
            if [ -n "$previous_tag" ]; then
              changelog="$(git log "$previous_tag..$version_tag" --pretty=format:"- %s (%h)" --no-merges | head -20)"
            else
              changelog="- Initial release"
            fi
          fi

          cat > release_notes.md <<EOF
          # 🚀 RouteForce $version_tag

          ## 📋 What's Changed
          $changelog

          ## 🐳 Docker Image
          \`\`\`bash
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$version_tag
          \`\`\`

          ## 📦 Installation (PyPI)
          \`\`\`bash
          pip install routeforce==$version_pypi
          \`\`\`

          ## 🔧 Deployment
          - Docker image built and pushed
          - (Add your real checks here)

          $( [ -n "$previous_tag" ] && echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$previous_tag...$version_tag" )
          EOF

          echo "Generated release notes:"
          cat release_notes.md

      - name: 📦 Archive Python dist
        run: |
          [ -d dist ] || { echo "dist not found"; exit 1; }
          zip -r routeforce-dist.zip dist

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version_tag }}
          name: "🚀 RouteForce ${{ steps.version.outputs.version_tag }}"
          body_path: release_notes.md
          prerelease: ${{ contains(steps.version.outputs.version_tag, 'pre') || (github.event_name == 'workflow_dispatch' && github.event.inputs.pre_release == 'true') }}
          files: |
            routeforce-dist.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify about release
  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-release]
    if: always() && (needs.build-and-release.result == 'success')
    
    steps:
      - name: 📢 Notify team
        run: |
          version="${{ needs.create-release.outputs.new_version || github.ref_name }}"
          echo "🎉 RouteForce $version has been released!"
          echo "Docker image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$version"
          
          # Here you could add notifications to Slack, Discord, etc.
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚀 RouteForce '$version' released!"}' \
          # Slack notification disabled - configure webhook to enable
          webhook_url: "https://hooks.slack.com/disabled"

  # Deploy to staging after release
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-release]
    if: always() && needs.build-and-release.result == 'success' && !contains(github.ref_name, 'pre')
    # environment: staging # Disabled until environment configured
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          version="${{ github.ref_name }}" # || needs.create-release.outputs.new_version }}
          
          # Here you would add your actual deployment logic
          # For example, updating a Kubernetes deployment, calling a webhook, etc.
          
          echo "✅ Deployed RouteForce $version to staging"
          echo "Staging URL: https://staging.routeforce.app"
          
          # Example deployment commands:
          # kubectl set image deployment/routeforce routeforce=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$version
          # kubectl rollout status deployment/routeforce

      - name: 🧪 Smoke tests
        run: |
          echo "Running smoke tests against staging..."
          
          # Add your smoke tests here
          # curl -f https://staging.routeforce.app/health || exit 1
          # curl -f https://staging.routeforce.app/api/v1/status || exit 1
          
          echo "✅ Smoke tests passed"
