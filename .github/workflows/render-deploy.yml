name: üöÄ Deploy to Render

permissions:
  contents: read

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: routeforce-app

concurrency:
  group: render-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security and Quality Checks
  security-scan:
    name: üîí Security & Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run security checks
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          safety check --json > safety-report.json || true

  # Build and Test
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: routeforce
          POSTGRES_PASSWORD: routeforce_test
          POSTGRES_DB: routeforce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run comprehensive tests
        env:
          DATABASE_URL: postgresql://routeforce:routeforce_test@localhost:5432/routeforce_test
          REDIS_URL: redis://localhost:6379
          FLASK_ENV: testing
        run: |
          pytest -xvs --cov=./ --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }} # pragma: allowlist secret

  # Docker Build and Push
  docker-build:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # pragma: allowlist secret
          password: ${{ secrets.DOCKER_PASSWORD }} # pragma: allowlist secret

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Render Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    steps:
      - name: Trigger Render deploy (staging)
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys" -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" -H "Content-Type: application/json" -d '{"clearCache": "clear"}' # pragma: allowlist secret

      - name: Wait and health check
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 60
          for i in {1..10}; do
            if curl -f -s https://routeforce-staging.onrender.com/health; then
              echo "‚úÖ Staging deployment healthy!"; break; else
              echo "‚è≥ Waiting... ($i/10)"; sleep 30; fi; done

  # Deploy to Render Production
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    steps:
      - name: Trigger Render deploy (production)
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys" -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" -H "Content-Type: application/json" -d '{"clearCache": "clear"}' # pragma: allowlist secret

      - name: Wait and health check
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 90
          for i in {1..15}; do
            if curl -f -s https://routeforce-routing.onrender.com/health; then
              echo "‚úÖ Production deployment healthy!"; break; else
              echo "‚è≥ Waiting... ($i/15)"; sleep 30; fi; done