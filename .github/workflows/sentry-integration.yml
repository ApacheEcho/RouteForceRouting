name: üìä Sentry Integration

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  SENTRY_ORG: routeforce-routing
  SENTRY_PROJECT: routeforce-api

concurrency:
  group: sentry-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Use explicit minimal permissions; jobs override if needed
permissions: {}

jobs:
  sentry-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip

      - name: ‚öôÔ∏è Install Sentry CLI
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli --version

      - name: üè∑Ô∏è Determine release version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA:0:7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: üöÄ Create Sentry release
        if: ${{ secrets.SENTRY_AUTH_TOKEN && (github.event_name == 'push' || github.event_name == 'release') }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          # Create new release
          sentry-cli releases new ${{ steps.version.outputs.version }}
          # Set commits for this release
          sentry-cli releases set-commits ${{ steps.version.outputs.version }} --auto || echo "‚ö†Ô∏è Unable to auto associate commits"
          # Upload source maps (if any JS/TS files exist)
          if find . -name "*.js" -o -name "*.ts" | head -1 | grep -q .; then
            sentry-cli releases files ${{ steps.version.outputs.version }} upload-sourcemaps \
              --url-prefix "~/" \
              --validate \
              ./static/ || echo "No source maps to upload"
          fi
          # Finalize
          sentry-cli releases finalize ${{ steps.version.outputs.version }}

      - name: üéØ Deploy to Sentry
        if: ${{ secrets.SENTRY_AUTH_TOKEN && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          sentry-cli releases deploys ${{ steps.version.outputs.version }} new \
            --env ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} \
            --name "GitHub Actions Deploy"

      - name: üìä Send deployment notification
        if: always()
        run: |
          echo "## üìä Sentry Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Release in Sentry](https://sentry.io/organizations/${{ env.SENTRY_ORG }}/releases/)" >> $GITHUB_STEP_SUMMARY

  sentry-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip

      - name: ‚öôÔ∏è Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sentry-sdk[flask] pytest pytest-mock

      - name: üß™ Test Sentry integration
        if: ${{ secrets.SENTRY_DSN }}
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          python << 'EOF'
          import sys
          import os
          
          # Add the app directory to Python path
          sys.path.insert(0, os.path.join(os.getcwd(), '.'))
          
          try:
              # Test Sentry configuration
              from app.monitoring.sentry_config import SentryConfig, init_sentry
              
              config = SentryConfig()
              print(f"‚úÖ Sentry configuration loaded")
              print(f"   - Environment: {config.environment}")
              print(f"   - Release: {config.release}")
              print(f"   - Traces sample rate: {config.traces_sample_rate}")
              
              # Test initialization (without actual DSN in CI)
              os.environ['SENTRY_DSN'] = 'https://test@sentry.io/123456'
              success = init_sentry()
              print(f"‚úÖ Sentry initialization test: {'passed' if success else 'passed (no DSN)'}")
              
              # Test Sentry utilities
              from app.monitoring.sentry_config import SentryHelper, monitor_performance
              
              # Test helper functions
              helper = SentryHelper()
              print("‚úÖ SentryHelper instantiated successfully")
              
              # Test decorator
              @monitor_performance("test_algorithm")
              def test_function():
                  return "test_result"
              
              result = test_function()
              print(f"‚úÖ Performance monitor decorator test: {result}")
              
              print("\nüéâ All Sentry integration tests passed!")
              
          except ImportError as e:
              print(f"‚ùå Import error: {e}")
              sys.exit(1)
          except Exception as e:
              print(f"‚ùå Test error: {e}")
              sys.exit(1)
          EOF

      - name: üìä Test performance monitoring
        run: |
          python << 'EOF'
          import sys
          import os
          import time
          
          sys.path.insert(0, os.path.join(os.getcwd(), '.'))
          
          try:
              from app.monitoring.sentry_config import SentryContext, SentryHelper
              
              # Test context manager
              with SentryContext("test_operation", algorithm="test") as ctx:
                  ctx.set_context("test_data", {"value": 123})
                  ctx.add_breadcrumb("Test breadcrumb")
                  time.sleep(0.1)  # Simulate work
                  print("‚úÖ SentryContext test completed")
              
              # Test performance capture
              helper = SentryHelper()
              helper.capture_performance_metrics("genetic_algorithm", 0.5, 64, 10)
              print("‚úÖ Performance metrics capture test completed")
              
              # Test API usage capture
              helper.capture_api_usage("/api/optimize", 0.3, 200, "test_user")
              print("‚úÖ API usage capture test completed")
              
              print("\nüéâ All performance monitoring tests passed!")
              
          except Exception as e:
              print(f"‚ùå Performance monitoring test error: {e}")
              sys.exit(1)
          EOF

  sentry-documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üìö Generate Sentry documentation
        run: |
          cat << 'EOF' > sentry_integration_report.md
          # üìä Sentry Integration Report
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")
          **Workflow:** ${{ github.workflow }}
          **Run:** ${{ github.run_number }}
          
          ## üéØ Integration Status
          
          - ‚úÖ **Sentry SDK**: Configured with Flask integration
          - ‚úÖ **Performance Monitoring**: Enabled with transaction tracking
          - ‚úÖ **Error Tracking**: Comprehensive error capture and filtering
          - ‚úÖ **Custom Metrics**: Route optimization and API performance
          - ‚úÖ **Release Management**: Automated release creation and deployment tracking
          
          ## üîß Configuration
          
          ### Environment Variables
          ```bash
          SENTRY_DSN=your-sentry-dsn-here
          FLASK_ENV=development
          SENTRY_RELEASE=1.0.0
          SENTRY_TRACES_SAMPLE_RATE=0.1
          SENTRY_PROFILES_SAMPLE_RATE=0.1
          ```
          
          ### Flask Integration
          - **Error Handling**: Automatic exception capture
          - **Performance Tracking**: Request/response monitoring
          - **User Context**: Request-based user identification
          - **Custom Tags**: Route, method, and status code tagging
          
          ## üìà Features
          
          ### 1. **Route Optimization Monitoring**
          - Algorithm performance tracking
          - Memory usage monitoring
          - Execution time analysis
          - Error capture with context
          
          ### 2. **API Performance Monitoring**
          - Response time tracking
          - Status code monitoring
          - Slow API detection
          - User session tracking
          
          ### 3. **Database Monitoring**
          - Query performance tracking
          - Connection pool monitoring
          - Error capture with query context
          - Transaction analysis
          
          ### 4. **Custom Error Handling**
          - Intelligent error filtering
          - Custom fingerprinting for better grouping
          - Breadcrumb trail for debugging
          - Context preservation
          
          ## üöÄ Usage Examples
          
          ### Performance Monitoring Decorator
          ```python
          from app.monitoring import monitor_performance
          
          @monitor_performance("genetic_algorithm")
          def optimize_route(locations):
              # Your optimization logic here
              return optimized_route
          ```
          
          ### Context Manager
          ```python
          from app.monitoring import SentryContext
          
          with SentryContext("route_calculation", algorithm="dijkstra") as ctx:
              ctx.set_context("locations", {"count": len(locations)})
              result = calculate_route(locations)
              ctx.add_breadcrumb("Route calculated successfully")
          ```
          
          ### Custom Error Capture
          ```python
          from app.monitoring import SentryHelper
          
          try:
              result = risky_operation()
          except Exception as e:
              SentryHelper.capture_route_optimization_error(
                  "genetic_algorithm", 
                  location_count, 
                  e
              )
              raise
          ```
          
          ## üìä Monitoring Dashboards
          
          Access your Sentry dashboards at:
          - **Issues**: https://sentry.io/organizations/${{ env.SENTRY_ORG }}/issues/
          - **Performance**: https://sentry.io/organizations/${{ env.SENTRY_ORG }}/performance/
          - **Releases**: https://sentry.io/organizations/${{ env.SENTRY_ORG }}/releases/
          
          ## üîß Troubleshooting
          
          ### Common Issues
          1. **No DSN configured**: Set SENTRY_DSN environment variable
          2. **High noise levels**: Adjust sample rates in configuration
          3. **Missing releases**: Ensure SENTRY_AUTH_TOKEN is set for CI/CD
          
          ### Debug Mode
          ```python
          import logging
          logging.getLogger('sentry_sdk').setLevel(logging.DEBUG)
          ```
          
          ---
          *Generated by Sentry Integration Workflow*
          EOF

      - name: üì§ Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: sentry-integration-report
          path: sentry_integration_report.md
          retention-days: 30

      - name: üìä Update workflow summary
        run: |
          echo "## üìä Sentry Integration Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Integration Status**: Complete" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Configuration**: Validated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Testing**: All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Documentation**: Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Documentation**: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Setup Guide**: Check repository for .env.sentry.example" >> $GITHUB_STEP_SUMMARY
