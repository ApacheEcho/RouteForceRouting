version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: routeforce
      POSTGRES_USER: routeforce
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-routeforce_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U routeforce -d routeforce"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - routeforce-network

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - routeforce-network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://routeforce:${POSTGRES_PASSWORD:-routeforce_secure_2024}@postgres:5432/routeforce
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - CACHE_TYPE=redis
      - CACHE_REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/1
      - RATELIMIT_STORAGE_URI=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/2
      - SECRET_KEY=${SECRET_KEY:-your_very_secure_secret_key_here_2024}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_here_2024}
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=true
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./instance:/app/instance
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - routeforce-network

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - routeforce-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    restart: unless-stopped
    networks:
      - routeforce-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - routeforce-network

  # Celery Worker for Async Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://routeforce:${POSTGRES_PASSWORD:-routeforce_secure_2024}@postgres:5432/routeforce
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/3
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - routeforce-network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://routeforce:${POSTGRES_PASSWORD:-routeforce_secure_2024}@postgres:5432/routeforce
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/3
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - routeforce-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  routeforce-network:
    driver: bridge
