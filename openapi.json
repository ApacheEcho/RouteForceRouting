{
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "AnalyticsDataResponse": {
      "properties": {
        "data": {
          "type": "object"
        },
        "generated_at": {
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AnalyticsHealthResponse": {
      "properties": {
        "capabilities": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "service": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectionLeg": {
      "properties": {
        "distance": {
          "$ref": "#/definitions/DistanceValue"
        },
        "duration": {
          "$ref": "#/definitions/DistanceValue"
        },
        "duration_in_traffic": {
          "$ref": "#/definitions/DistanceValue"
        },
        "end_location": {
          "$ref": "#/definitions/LatLng"
        },
        "start_location": {
          "$ref": "#/definitions/LatLng"
        },
        "steps": {
          "items": {
            "$ref": "#/definitions/DirectionStep"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DirectionStep": {
      "properties": {
        "distance": {
          "$ref": "#/definitions/DistanceValue"
        },
        "duration": {
          "$ref": "#/definitions/DistanceValue"
        },
        "end_location": {
          "$ref": "#/definitions/LatLng"
        },
        "html_instructions": {
          "type": "string"
        },
        "maneuver": {
          "type": "string"
        },
        "polyline": {
          "type": "object"
        },
        "start_location": {
          "$ref": "#/definitions/LatLng"
        }
      },
      "type": "object"
    },
    "Directions": {
      "properties": {
        "bounds": {
          "type": "object"
        },
        "legs": {
          "items": {
            "$ref": "#/definitions/DirectionLeg"
          },
          "type": "array"
        },
        "overview_polyline": {
          "type": "object"
        },
        "warnings": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DistanceValue": {
      "properties": {
        "text": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ErrorResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LatLng": {
      "properties": {
        "lat": {
          "type": "number"
        },
        "lng": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "LoginRequest": {
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "type": "object"
    },
    "MobileAssignedRoutesResponse": {
      "properties": {
        "routes": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "success": {
          "type": "boolean"
        },
        "total": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MobileCompressedRoute": {
      "properties": {
        "id": {
          "type": "string"
        },
        "optimized": {
          "type": "boolean"
        },
        "stops": {
          "items": {
            "$ref": "#/definitions/MobileCompressedStop"
          },
          "type": "array"
        },
        "total_distance": {
          "type": "number"
        },
        "total_time": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "MobileCompressedStop": {
      "properties": {
        "address": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lat": {
          "type": "number"
        },
        "lng": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MobileDriverLocationRequest": {
      "properties": {
        "accuracy": {
          "example": 5.0,
          "type": "number"
        },
        "driver_id": {
          "example": "driver_123",
          "type": "string"
        },
        "heading": {
          "example": 180,
          "type": "number"
        },
        "lat": {
          "example": 40.7128,
          "type": "number"
        },
        "lng": {
          "example": -74.006,
          "type": "number"
        },
        "speed": {
          "example": 45.3,
          "type": "number"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "driver_id",
        "lat",
        "lng"
      ],
      "type": "object"
    },
    "MobileDriverLocationResponse": {
      "properties": {
        "received_at": {
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MobileDriverStatusRequest": {
      "properties": {
        "driver_id": {
          "example": "driver_123",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "enum": [
            "available",
            "busy",
            "en_route",
            "delivering",
            "break",
            "offline"
          ],
          "example": "available",
          "type": "string"
        }
      },
      "required": [
        "driver_id",
        "status"
      ],
      "type": "object"
    },
    "MobileDriverStatusResponse": {
      "properties": {
        "status": {
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MobileProfileResponse": {
      "properties": {
        "success": {
          "type": "boolean"
        },
        "user": {
          "properties": {
            "active_routes": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "MobileRouteDetailsResponse": {
      "properties": {
        "estimated_duration": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "stores": {
          "items": {
            "properties": {
              "address": {
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MobileRouteOptimizeResponse": {
      "properties": {
        "mobile_optimized": {
          "type": "boolean"
        },
        "optimization_time": {
          "type": "number"
        },
        "route": {
          "$ref": "#/definitions/MobileCompressedRoute"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MobileRouteStatusUpdateResponse": {
      "properties": {
        "message": {
          "type": "string"
        },
        "route_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MobileTrackingStatusResponse": {
      "properties": {
        "success": {
          "type": "boolean"
        },
        "tracking": {
          "properties": {
            "accuracy": {
              "type": "string"
            },
            "active": {
              "type": "boolean"
            },
            "last_update": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ParetoFrontResponse": {
      "properties": {
        "count": {
          "type": "integer"
        },
        "front": {
          "items": {
            "$ref": "#/definitions/ParetoItem"
          },
          "type": "array"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ParetoItem": {
      "properties": {
        "crowding_distance": {
          "type": "number"
        },
        "objectives": {
          "additionalProperties": {
            "type": "number"
          },
          "type": "object"
        },
        "rank": {
          "type": "integer"
        },
        "route": {
          "items": {
            "$ref": "#/definitions/Store"
          },
          "type": "array"
        },
        "route_indices": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RegisterRequest": {
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "password",
        "username"
      ],
      "type": "object"
    },
    "RouteCompareResponse": {
      "properties": {
        "comparison": {
          "properties": {
            "best_route_index": {
              "type": "integer"
            },
            "best_score": {
              "type": "number"
            },
            "route_count": {
              "type": "integer"
            },
            "score_range": {
              "properties": {
                "average": {
                  "type": "number"
                },
                "max": {
                  "type": "number"
                },
                "min": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            "scores": {
              "items": {
                "$ref": "#/definitions/RouteScoreData"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RouteItem": {
      "$ref": "#/definitions/Store"
    },
    "RouteScoreData": {
      "properties": {
        "calculation_time_ms": {
          "type": "number"
        },
        "component_scores": {
          "additionalProperties": {
            "type": "number"
          },
          "type": "object"
        },
        "metadata": {
          "type": "object"
        },
        "raw_metrics": {
          "type": "object"
        },
        "total_score": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "RouteScoreResponse": {
      "properties": {
        "score": {
          "$ref": "#/definitions/RouteScoreData"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ScoringHistoryItem": {
      "properties": {
        "route_id": {
          "type": "string"
        },
        "score": {
          "$ref": "#/definitions/RouteScoreData"
        },
        "timestamp": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ScoringHistoryResponse": {
      "properties": {
        "count": {
          "type": "integer"
        },
        "history": {
          "items": {
            "$ref": "#/definitions/ScoringHistoryItem"
          },
          "type": "array"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ScoringWeights": {
      "properties": {
        "distance_weight": {
          "type": "number"
        },
        "efficiency_weight": {
          "type": "number"
        },
        "playbook_weight": {
          "type": "number"
        },
        "priority_weight": {
          "type": "number"
        },
        "time_weight": {
          "type": "number"
        },
        "traffic_weight": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ScoringWeightsPresetsResponse": {
      "properties": {
        "default": {
          "type": "string"
        },
        "presets": {
          "additionalProperties": {
            "$ref": "#/definitions/ScoringWeights"
          },
          "type": "object"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Store": {
      "properties": {
        "id": {
          "type": "string"
        },
        "lat": {
          "type": "number"
        },
        "lon": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        }
      },
      "required": [
        "lat",
        "lon"
      ],
      "type": "object"
    },
    "TrafficDirectionsResponse": {
      "properties": {
        "alternatives": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "directions": {
          "$ref": "#/definitions/Directions"
        },
        "mobile_formatted": {
          "type": "boolean"
        },
        "success": {
          "type": "boolean"
        },
        "traffic_info": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "TrafficStop": {
      "properties": {
        "lat": {
          "type": "number"
        },
        "lng": {
          "type": "number"
        }
      },
      "required": [
        "lat",
        "lng"
      ],
      "type": "object"
    },
    "VoiceAudioUploadResponse": {
      "properties": {
        "data": {
          "properties": {
            "audio_id": {
              "type": "string"
            },
            "filename": {
              "type": "string"
            },
            "processing_status": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "status": {
              "type": "string"
            },
            "uploaded_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "VoiceNoteResponse": {
      "properties": {
        "data": {
          "properties": {
            "category": {
              "type": "string"
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "note_id": {
              "type": "string"
            },
            "priority": {
              "type": "string"
            },
            "processed": {
              "type": "boolean"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "transcript": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "info": {
    "contact": {
      "name": "RouteForce Support",
      "url": "https://github.com/ApacheEcho/RouteForceRouting"
    },
    "description": "API documentation for RouteForce Routing application - A comprehensive route optimization platform for field execution teams",
    "title": "RouteForce Routing API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/analytics/api-usage": {
      "get": {
        "description": "Retrieve API usage and performance metrics for the selected timeframe",
        "parameters": [
          {
            "default": "24h",
            "enum": [
              "1h",
              "24h",
              "7d",
              "30d"
            ],
            "in": "query",
            "name": "timeframe",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "API analytics retrieved successfully"
          },
          "400": {
            "description": "Invalid timeframe parameter"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "500": {
            "description": "Failed to retrieve API analytics"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get API usage and performance analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/drivers": {
      "get": {
        "description": "Retrieve analytics data for driver performance metrics",
        "parameters": [
          {
            "default": "24h",
            "description": "Time period for analytics data",
            "enum": [
              "1h",
              "24h",
              "7d",
              "30d"
            ],
            "in": "query",
            "name": "timeframe",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Driver analytics data retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AnalyticsDataResponse"
            }
          },
          "400": {
            "description": "Invalid timeframe parameter",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - invalid API key",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Failed to retrieve driver analytics",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Analytics service not available",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get driver performance analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/health": {
      "get": {
        "description": "Returns service status and capabilities for the analytics service",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "examples": {
              "application/json": {
                "capabilities": [
                  "mobile_analytics",
                  "driver_performance",
                  "route_optimization_analytics"
                ],
                "service": "RouteForce Analytics API",
                "status": "healthy",
                "timestamp": "2024-01-15T10:30:00Z",
                "version": "1.0.0"
              }
            },
            "schema": {
              "$ref": "#/definitions/AnalyticsHealthResponse"
            }
          },
          "500": {
            "description": "Health check failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Analytics API health check endpoint",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/mobile": {
      "get": {
        "description": "Retrieve analytics data for mobile app usage with specified timeframe",
        "parameters": [
          {
            "default": "24h",
            "description": "Time period for analytics data",
            "enum": [
              "1h",
              "24h",
              "7d",
              "30d"
            ],
            "in": "query",
            "name": "timeframe",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Mobile analytics data retrieved successfully",
            "examples": {
              "application/json": {
                "data": {
                  "active_users": 123,
                  "sessions": 456
                },
                "generated_at": "2024-01-15T10:30:00Z",
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/AnalyticsDataResponse"
            }
          },
          "400": {
            "description": "Invalid timeframe parameter",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - invalid API key",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Failed to retrieve mobile analytics",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Analytics service not available",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get mobile app usage analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/routes": {
      "get": {
        "description": "Retrieve route optimization analytics for the selected timeframe",
        "parameters": [
          {
            "default": "24h",
            "enum": [
              "1h",
              "24h",
              "7d",
              "30d"
            ],
            "in": "query",
            "name": "timeframe",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Route analytics retrieved successfully"
          },
          "400": {
            "description": "Invalid timeframe parameter"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "500": {
            "description": "Failed to retrieve route analytics"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get route optimization analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/system-health": {
      "get": {
        "description": "Retrieve system health metrics for monitoring and diagnostics",
        "responses": {
          "200": {
            "description": "System health metrics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get overall system health metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/track/driver": {
      "post": {
        "description": "Submit driver performance metrics for analytics",
        "parameters": [
          {
            "in": "body",
            "name": "driver_metrics",
            "required": true,
            "schema": {
              "properties": {
                "customer_rating": {
                  "type": "number"
                },
                "driver_id": {
                  "type": "string"
                },
                "fuel_efficiency": {
                  "type": "number"
                },
                "location_accuracy": {
                  "type": "number"
                },
                "route_deviation": {
                  "type": "number"
                },
                "speed": {
                  "type": "number"
                },
                "stops_completed": {
                  "type": "integer"
                },
                "time_at_stop": {
                  "type": "number"
                }
              },
              "required": [
                "driver_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Driver performance tracked successfully"
          },
          "400": {
            "description": "Bad request - driver_id is required"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "500": {
            "description": "Failed to track driver performance"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Track driver performance metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/track/event": {
      "post": {
        "description": "Submit arbitrary system events for analytics and auditing",
        "parameters": [
          {
            "in": "body",
            "name": "event_data",
            "required": true,
            "schema": {
              "properties": {
                "event_data": {
                  "type": "object"
                },
                "event_type": {
                  "type": "string"
                }
              },
              "required": [
                "event_type"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event tracked successfully"
          },
          "400": {
            "description": "Bad request - event_type is required"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "500": {
            "description": "Failed to track event"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Track system event",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/track/route": {
      "post": {
        "description": "Submit route-level analytics and KPIs",
        "parameters": [
          {
            "in": "body",
            "name": "route_data",
            "required": true,
            "schema": {
              "properties": {
                "algorithm": {
                  "type": "string"
                },
                "improvement_percentage": {
                  "type": "number"
                },
                "optimization_time": {
                  "type": "number"
                },
                "route_id": {
                  "type": "string"
                },
                "total_distance": {
                  "type": "number"
                },
                "total_time": {
                  "type": "number"
                }
              },
              "required": [
                "route_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route optimization tracked successfully"
          },
          "400": {
            "description": "Bad request - route_id is required"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "500": {
            "description": "Failed to track route optimization"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Track route optimization performance",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/track/session": {
      "post": {
        "description": "Track mobile app session data for analytics purposes",
        "parameters": [
          {
            "in": "body",
            "name": "session_data",
            "required": true,
            "schema": {
              "properties": {
                "api_calls": {
                  "description": "Number of API calls made",
                  "example": 15,
                  "type": "integer"
                },
                "app_version": {
                  "description": "Application version",
                  "example": "1.0.0",
                  "type": "string"
                },
                "device_id": {
                  "description": "Unique device identifier",
                  "example": "device_123456",
                  "type": "string"
                },
                "device_type": {
                  "description": "Type of device",
                  "example": "mobile",
                  "type": "string"
                },
                "features_used": {
                  "description": "List of features used in session",
                  "example": [
                    "routing",
                    "maps",
                    "analytics"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "device_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session tracked successfully",
            "schema": {
              "properties": {
                "message": {
                  "example": "Session tracked successfully",
                  "type": "string"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request - device_id is required",
            "schema": {
              "properties": {
                "error": {
                  "example": "device_id is required",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "500": {
            "description": "Failed to track session"
          },
          "503": {
            "description": "Analytics service not available"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Track mobile app session for analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/docs": {
      "get": {
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Swagger UI HTML"
          }
        },
        "summary": "Swagger UI"
      }
    },
    "/api/mobile/auth/login": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "password": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Mobile authentication login",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/auth/logout": {
      "post": {
        "responses": {
          "200": {
            "description": "Logged out"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Mobile logout",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/auth/profile": {
      "get": {
        "responses": {
          "200": {
            "description": "Profile returned",
            "schema": {
              "$ref": "#/definitions/MobileProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get user profile information",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/auth/refresh": {
      "post": {
        "responses": {
          "200": {
            "description": "Token refreshed"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Refresh authentication token",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/auth/token": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "app_version": {
                  "type": "string"
                },
                "device_id": {
                  "type": "string"
                }
              },
              "required": [
                "device_id",
                "app_version"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token issued"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get a mobile session token",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/driver/location": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MobileDriverLocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location accepted",
            "schema": {
              "$ref": "#/definitions/MobileDriverLocationResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update driver location",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/driver/status": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MobileDriverStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status updated",
            "schema": {
              "$ref": "#/definitions/MobileDriverStatusResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update driver status",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/health": {
      "get": {
        "responses": {
          "200": {
            "description": "Service is healthy"
          },
          "500": {
            "description": "Health check failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Mobile API health check",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/offline/download/{route_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "route_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Offline data returned"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Download route data for offline use",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/offline/sync": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "device_id": {
                  "type": "string"
                },
                "offline_data": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "device_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sync processed"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Sync offline data",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/optimize/feedback": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback submitted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Submit feedback for route optimization",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/optimize/suggestions": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "route_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Suggestions returned"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get route optimization suggestions",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/performance/metrics": {
      "get": {
        "parameters": [
          {
            "description": "Time period for metrics",
            "in": "query",
            "name": "period",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics returned"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get driver performance metrics",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/routes/assigned": {
      "get": {
        "responses": {
          "200": {
            "description": "Assigned routes returned",
            "schema": {
              "$ref": "#/definitions/MobileAssignedRoutesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get routes assigned to the authenticated driver",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/routes/optimize": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "preferences": {
                  "type": "object"
                },
                "stores": {
                  "items": {
                    "$ref": "#/definitions/Store"
                  },
                  "type": "array"
                }
              },
              "required": [
                "stores"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route optimized",
            "examples": {
              "application/json": {
                "mobile_optimized": true,
                "optimization_time": 0.423,
                "route": {
                  "id": "route_123",
                  "optimized": true,
                  "stops": [
                    {
                      "address": "1 Main St",
                      "id": "s1",
                      "lat": 40.71,
                      "lng": -74.0,
                      "name": "Store A",
                      "order": 0
                    },
                    {
                      "address": "2 Oak Ave",
                      "id": "s2",
                      "lat": 40.76,
                      "lng": -73.98,
                      "name": "Store B",
                      "order": 1
                    }
                  ],
                  "total_distance": 12.3,
                  "total_time": 45.0
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/MobileRouteOptimizeResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Optimize a route for mobile",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/routes/traffic": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "destination": {
                  "$ref": "#/definitions/TrafficStop"
                },
                "origin": {
                  "$ref": "#/definitions/TrafficStop"
                },
                "waypoints": {
                  "items": {
                    "$ref": "#/definitions/TrafficStop"
                  },
                  "type": "array"
                }
              },
              "required": [
                "origin",
                "destination"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Directions generated",
            "examples": {
              "application/json": {
                "alternatives": [],
                "directions": {
                  "bounds": {},
                  "legs": [
                    {
                      "distance": {
                        "text": "12 km",
                        "value": 12000
                      },
                      "duration": {
                        "text": "25 mins",
                        "value": 1500
                      },
                      "duration_in_traffic": {
                        "text": "28 mins",
                        "value": 1680
                      },
                      "end_location": {
                        "lat": 40.76,
                        "lng": -73.98
                      },
                      "start_location": {
                        "lat": 40.71,
                        "lng": -74.0
                      },
                      "steps": [
                        {
                          "distance": {
                            "text": "1 km",
                            "value": 1000
                          },
                          "duration": {
                            "text": "3 mins",
                            "value": 180
                          },
                          "end_location": {
                            "lat": 40.72,
                            "lng": -74.0
                          },
                          "html_instructions": "Head north",
                          "maneuver": "turn-left",
                          "polyline": {
                            "points": "efgh"
                          },
                          "start_location": {
                            "lat": 40.71,
                            "lng": -74.0
                          }
                        }
                      ]
                    }
                  ],
                  "overview_polyline": {
                    "points": "abcd"
                  },
                  "warnings": []
                },
                "mobile_formatted": true,
                "success": true,
                "traffic_info": {
                  "congestion": "moderate"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/TrafficDirectionsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get traffic-aware directions for mobile",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/routes/{route_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "route_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Route details returned",
            "schema": {
              "$ref": "#/definitions/MobileRouteDetailsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Route not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get detailed route information",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/routes/{route_id}/status": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "route_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route status updated",
            "schema": {
              "$ref": "#/definitions/MobileRouteStatusUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update route status",
        "tags": [
          "Mobile"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "route_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route status updated",
            "schema": {
              "$ref": "#/definitions/MobileRouteStatusUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update route status",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/tracking/location": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "latitude": {
                  "type": "number"
                },
                "longitude": {
                  "type": "number"
                }
              },
              "required": [
                "latitude",
                "longitude"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location updated"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update driver location (legacy)",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/mobile/tracking/status": {
      "get": {
        "responses": {
          "200": {
            "description": "Tracking status returned",
            "schema": {
              "$ref": "#/definitions/MobileTrackingStatusResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get current tracking status",
        "tags": [
          "Mobile"
        ]
      }
    },
    "/api/route/score": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "context": {
                  "type": "object"
                },
                "preset": {
                  "enum": [
                    "balanced",
                    "distance_focused",
                    "priority_focused",
                    "traffic_aware",
                    "playbook_strict"
                  ],
                  "type": "string"
                },
                "route": {
                  "items": {
                    "$ref": "#/definitions/RouteItem"
                  },
                  "type": "array"
                },
                "weights": {
                  "type": "object"
                }
              },
              "required": [
                "route"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Score computed",
            "examples": {
              "application/json": {
                "score": {
                  "calculation_time_ms": 4.12,
                  "component_scores": {
                    "distance": 0.92,
                    "efficiency": 0.7,
                    "playbook": 0.8,
                    "priority": 0.9,
                    "time": 0.85,
                    "traffic": 0.78
                  },
                  "metadata": {
                    "route_length": 5
                  },
                  "raw_metrics": {
                    "total_distance_km": 12.3,
                    "total_time_h": 0.75
                  },
                  "total_score": 87.25
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/RouteScoreResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Score a single route",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/route/score/compare": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "context": {
                  "type": "object"
                },
                "preset": {
                  "type": "string"
                },
                "routes": {
                  "items": {
                    "items": {
                      "$ref": "#/definitions/RouteItem"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              },
              "required": [
                "routes"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comparison computed",
            "examples": {
              "application/json": {
                "comparison": {
                  "best_route_index": 0,
                  "best_score": 82.5,
                  "route_count": 2,
                  "score_range": {
                    "average": 80.3,
                    "max": 82.5,
                    "min": 78.1
                  },
                  "scores": [
                    {
                      "calculation_time_ms": 3.2,
                      "component_scores": {
                        "distance": 0.9
                      },
                      "metadata": {},
                      "raw_metrics": {},
                      "total_score": 82.5
                    },
                    {
                      "calculation_time_ms": 3.4,
                      "component_scores": {
                        "distance": 0.85
                      },
                      "metadata": {},
                      "raw_metrics": {},
                      "total_score": 78.1
                    }
                  ]
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/RouteCompareResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Compare multiple routes",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/route/score/history": {
      "get": {
        "parameters": [
          {
            "default": 10,
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Scoring history returned",
            "schema": {
              "$ref": "#/definitions/ScoringHistoryResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get recent scoring history",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/route/score/weights": {
      "get": {
        "responses": {
          "200": {
            "description": "Preset weights returned",
            "examples": {
              "application/json": {
                "default": "balanced",
                "presets": {
                  "balanced": {
                    "distance_weight": 0.25,
                    "efficiency_weight": 0.05,
                    "playbook_weight": 0.1,
                    "priority_weight": 0.25,
                    "time_weight": 0.2,
                    "traffic_weight": 0.15
                  }
                },
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ScoringWeightsPresetsResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get available weight presets and their configurations",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/swagger.json": {
      "get": {
        "responses": {
          "200": {
            "description": "Swagger spec JSON"
          }
        },
        "summary": "Swagger JSON"
      }
    },
    "/api/traffic/optimize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "constraints": {
                  "type": "object"
                },
                "start_location": {
                  "$ref": "#/definitions/TrafficStop"
                },
                "stores": {
                  "items": {
                    "$ref": "#/definitions/TrafficStop"
                  },
                  "type": "array"
                }
              },
              "required": [
                "stores"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Traffic-optimized route returned",
            "examples": {
              "application/json": {
                "algorithm_used": "traffic_optimized",
                "metrics": {
                  "processing_time": 0.12,
                  "total_distance": 12.3,
                  "total_duration": 1800,
                  "traffic_delay": 180
                },
                "route": [
                  {
                    "lat": 40.71,
                    "lng": -74.0,
                    "name": "Store A"
                  },
                  {
                    "lat": 40.76,
                    "lng": -73.98,
                    "name": "Store B"
                  }
                ],
                "success": true,
                "traffic_data": {
                  "delay_minutes": 3
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Generate traffic-optimized route",
        "tags": [
          "Traffic"
        ]
      }
    },
    "/api/traffic/predict": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "future_hours": {
                  "default": [
                    1,
                    2,
                    4,
                    8
                  ],
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "stores": {
                  "items": {
                    "$ref": "#/definitions/TrafficStop"
                  },
                  "type": "array"
                }
              },
              "required": [
                "stores"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Traffic prediction available",
            "examples": {
              "application/json": {
                "best_time": {
                  "hour": 1
                },
                "predictions": [
                  {
                    "delay_minutes": 2,
                    "hour": 1
                  },
                  {
                    "delay_minutes": 5,
                    "hour": 2
                  }
                ],
                "processing_time": 0.06,
                "recommendation": {
                  "depart_after_hours": 1
                },
                "success": true
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Predict traffic conditions for future departure times",
        "tags": [
          "Traffic"
        ]
      }
    },
    "/api/traffic/status": {
      "get": {
        "responses": {
          "200": {
            "description": "Service status returned",
            "examples": {
              "application/json": {
                "api_key_configured": true,
                "available": true,
                "cache_stats": {
                  "hits": 12,
                  "misses": 3
                },
                "config": {
                  "avoid_ferries": false,
                  "avoid_highways": false,
                  "avoid_tolls": false,
                  "cache_duration": 3600,
                  "max_waypoints": 23,
                  "traffic_model": "best_guess"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get status of traffic service and Google Maps API",
        "tags": [
          "Traffic"
        ]
      }
    },
    "/api/v1/auth/validate": {
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token validation result"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Validate current JWT access token",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/v1/login": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Login and obtain JWT tokens",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/v1/logout": {
      "post": {
        "description": "No request body required. Requires access token.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Logout and revoke JWT",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/v1/refresh": {
      "post": {
        "description": "No request body required. Requires refresh token in Authorization header.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token refreshed"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Refresh JWT access token",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/v1/register": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registration successful"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Register a new user",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/v1/routes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "constraints": {
                  "type": "object"
                },
                "options": {
                  "properties": {
                    "algorithm": {
                      "enum": [
                        "default",
                        "nearest_neighbor",
                        "priority",
                        "genetic",
                        "simulated_annealing",
                        "multi_objective"
                      ],
                      "type": "string"
                    },
                    "ga_generations": {
                      "type": "integer"
                    },
                    "ga_population_size": {
                      "type": "integer"
                    },
                    "mo_objectives": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "stores": {
                  "items": {
                    "$ref": "#/definitions/Store"
                  },
                  "type": "array"
                }
              },
              "required": [
                "stores"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Route created successfully",
            "examples": {
              "application/json": {
                "data": {
                  "algorithm_used": "genetic",
                  "route": [
                    {
                      "id": "s1",
                      "lat": 40.71,
                      "lon": -74.0,
                      "name": "Store A"
                    },
                    {
                      "id": "s2",
                      "lat": 40.76,
                      "lon": -73.98,
                      "name": "Store B"
                    }
                  ],
                  "route_id": 101
                },
                "metadata": {
                  "optimization_score": 1.8,
                  "processing_time": 0.25,
                  "route_stores": 2,
                  "total_stores": 2
                },
                "success": true
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Create a new route via API with database persistence",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/v1/routes/pareto": {
      "get": {
        "responses": {
          "200": {
            "description": "Pareto front returned (empty if no prior run)",
            "examples": {
              "application/json": {
                "count": 0,
                "front": [],
                "success": true
              }
            },
            "schema": {
              "$ref": "#/definitions/ParetoFrontResponse"
            }
          }
        },
        "summary": "Get last Pareto front from multi-objective optimization",
        "tags": [
          "Routes"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "options": {
                  "properties": {
                    "mo_crossover_rate": {
                      "default": 0.9,
                      "type": "number"
                    },
                    "mo_generations": {
                      "default": 100,
                      "type": "integer"
                    },
                    "mo_mutation_rate": {
                      "default": 0.1,
                      "type": "number"
                    },
                    "mo_objectives": {
                      "example": "distance,time",
                      "type": "string"
                    },
                    "mo_population_size": {
                      "default": 50,
                      "type": "integer"
                    },
                    "mo_tournament_size": {
                      "default": 2,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stores": {
                  "items": {
                    "$ref": "#/definitions/Store"
                  },
                  "type": "array"
                }
              },
              "required": [
                "stores"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pareto front computed",
            "schema": {
              "$ref": "#/definitions/ParetoFrontResponse"
            }
          }
        },
        "summary": "Run multi-objective optimization and return Pareto front",
        "tags": [
          "Routes"
        ]
      }
    },
    "/api/voice/audio/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "Audio file to upload (wav, mp3, ogg, webm, m4a)",
            "in": "formData",
            "name": "audio",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Audio uploaded",
            "schema": {
              "$ref": "#/definitions/VoiceAudioUploadResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Handle audio file upload for offline voice processing",
        "tags": [
          "Voice"
        ]
      }
    },
    "/api/voice/code-generation": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "component_name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "function_name": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                }
              },
              "required": [
                "description"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Code generated",
            "examples": {
              "application/json": {
                "data": {
                  "code": "def new_function():\n    # calculate something from input\n    pass\n",
                  "description": "calculate something from input",
                  "generated_at": "2024-01-15T10:30:00Z",
                  "language": "python",
                  "metadata": {
                    "characters": 120,
                    "function_name": "new_function",
                    "lines": 6
                  }
                },
                "success": true
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Generate code from voice input description",
        "tags": [
          "Voice"
        ]
      }
    },
    "/api/voice/commit": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "author": {
                  "type": "string"
                },
                "files": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Commit accepted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Handle voice-dictated commit messages",
        "tags": [
          "Voice"
        ]
      }
    },
    "/api/voice/notes": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "category": {
                  "type": "string"
                },
                "priority": {
                  "type": "string"
                },
                "tags": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "transcript": {
                  "type": "string"
                }
              },
              "required": [
                "transcript"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voice note saved",
            "schema": {
              "$ref": "#/definitions/VoiceNoteResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Save voice note for later processing",
        "tags": [
          "Voice"
        ]
      }
    },
    "/api/voice/settings": {
      "get": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "auto_save": {
                  "type": "boolean"
                },
                "language": {
                  "type": "string"
                },
                "noise_reduction": {
                  "type": "boolean"
                },
                "push_to_talk": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings retrieved/updated"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Get or update voice settings for the user",
        "tags": [
          "Voice"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "auto_save": {
                  "type": "boolean"
                },
                "language": {
                  "type": "string"
                },
                "noise_reduction": {
                  "type": "boolean"
                },
                "push_to_talk": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings retrieved/updated"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Get or update voice settings for the user",
        "tags": [
          "Voice"
        ]
      }
    },
    "/health": {
      "get": {
        "responses": {
          "200": {
            "description": "Service is healthy"
          },
          "503": {
            "description": "Degraded/Unhealthy"
          }
        },
        "summary": "Service health check"
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "X-API-Key",
      "type": "apiKey"
    },
    "JWT": {
      "description": "JWT Bearer token. Use: 'Bearer <token>'",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "Analytics and monitoring endpoints",
      "name": "Analytics"
    },
    {
      "description": "Mobile app specific endpoints",
      "name": "Mobile"
    },
    {
      "description": "Route optimization and management",
      "name": "Routes"
    },
    {
      "description": "Traffic data and routing",
      "name": "Traffic"
    }
  ]
}