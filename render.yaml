services:
  # Main Web Service
  - type: web
    name: routeforce-app
    plan: starter
    env: docker
    dockerfilePath: ./Dockerfile.production
    region: oregon
    startCommand: "gunicorn --config gunicorn_config.py wsgi:app"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: PORT
        value: 5000
      - key: PYTHONPATH
        value: /app
      - key: AUTO_COMMIT_ENABLED
        value: "false"
      - key: GIT_AUTO_BACKUP
        value: "false"
      - key: DATABASE_URL
        fromDatabase:
          name: routeforce-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: routeforce-redis
          property: connectionString
      # Keep Sentry DSN managed via Render Dashboard (not synced from repo)
      - key: SENTRY_DSN
        sync: false
      # Keep Flask SECRET_KEY managed via Render Dashboard (not synced from repo)
      - key: SECRET_KEY
        sync: false
    healthCheckPath: /health
    buildFilter:
      paths:
        - "**"
      ignoredPaths:
        - ".git/**"
        - "node_modules/**"
        - "*.md"
        - ".github/**"
    domains:
      - routeforce-routing.onrender.com

  # PostgreSQL Database
  - type: pserv
    name: routeforce-postgres
    plan: starter
    env: docker
    dockerfilePath: ./docker/postgres/Dockerfile
    region: oregon
    disk:
      name: postgres-data
      mountPath: /var/lib/postgresql/data
      sizeGB: 10
    envVars:
      - key: POSTGRES_DB
        value: routeforce
      - key: POSTGRES_USER
        value: routeforce
      - key: POSTGRES_PASSWORD
        generateValue: true
    healthCheckCommand: "pg_isready -U routeforce -d routeforce"
    
  # Redis Cache Service
  - type: redis
    name: routeforce-redis
    plan: starter
    region: oregon
    maxmemoryPolicy: allkeys-lru
    
  # Background Worker (Optional)
  - type: worker
    name: routeforce-worker
    plan: starter
    env: docker
    dockerfilePath: ./Dockerfile.production
    region: oregon
    startCommand: "celery -A app.celery worker --loglevel=info"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: routeforce-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: routeforce-redis
          property: connectionString
      # Keep Sentry DSN managed via Render Dashboard (not synced from repo)
      - key: SENTRY_DSN
        sync: false
      # Keep Flask SECRET_KEY managed via Render Dashboard (not synced from repo)
      - key: SECRET_KEY
        sync: false
    buildFilter:
      paths:
        - "**"
      ignoredPaths:
        - ".git/**"
        - "*.md"
        - ".github/**"

# Static Site (Documentation/Landing Page)
  - type: static
    name: routeforce-docs
    buildCommand: "npm run build"
    publishPath: "./docs/build"
    pullRequestPreviewsEnabled: true
    headers:
      - path: "/*"
        name: "X-Frame-Options"
        value: "DENY"
      - path: "/*"
        name: "X-Content-Type-Options"
        value: "nosniff"
